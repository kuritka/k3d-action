name: Single cluster on default network

on:
  [workflow_dispatch, push]
jobs:
  k3d-single-cluster-demo:
    name: Single cluster demo with default k3d-action-bridge-network
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # You may run into issues with grabbing certificates from the API-Server
      # in case if you use default bridge network. This leads to issues, where single server exists
      # but nodes are ignored, although they are visible as docker containers. Long story short
      # `kubectl get nodes` returns single server node instead of server + agent nodes
      # see: https://k3d.io/internals/networking/#bridge-network
      # k3d action handles that and puts all clusters into bridge network
#      - name: Create k3d-action-bridge-network
#        run: docker network create --driver=bridge --subnet=172.16.0.0/24 k3d-action-bridge-network
      - uses: ./
        name: "Test cluster 1"
        with:
          k3d-name: "test-cluster-1"
          k3d-args: >-
            -p "80:80@agent[0]"
            -p "443:443@agent[0]"
            -p "5053:53/udp@agent[0]"
            --agents 3
            --no-lb
            --network k3d-action-bridge-network
            --k3s-server-arg "--no-deploy=traefik,servicelb,metrics-server"
      - name: Cluster info
        run: kubectl cluster-info --context k3d-test-cluster-1
      - name: Nodes
        # hack, wait until agents are ready...
        # you can --wait node by node if you create nodes manually,
        # see: https://k3d.io/usage/commands/
        run: |
          docker ps -a
          sleep 10
          kubectl config use-context k3d-test-cluster-1
          kubectl get nodes -o wide
      - name: Network
        run: docker network inspect k3d-action-bridge-network
